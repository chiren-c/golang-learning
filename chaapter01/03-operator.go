package main

import (
	"fmt"
)

func main() {
	const (
		_ = iota             // 忽略第一个值
		a = 1 << (iota * 10) // a = 1 << (1 * 10) = 1024，左移 10 位，相当于乘以 2^10
		b                    // b = 1 << (2 * 10) = 1048576，左移 20 位，相当于乘以 2^20
		c                    // c = 1 << (3 * 10) = 1073741824，左移 30 位，相当于乘以 2^30
	)
	var d1 uint8 = 255
	var d2 uint8 = 255
	var d3 uint8 = 111
	// 按位取反,把 d1 中为 0 的位设为 1，为 1 的位设为 0
	// d1 = 11111111 取反后 d1 = 00000000
	// 注意：d1 的类型是 uint8，所以取反后仍然是 uint8 类型
	d1 = ^d1
	// 按位与
	// 把 d2 和 d3 一个为 1 一个为 0 的位设为 1
	// d2 = 11111111
	// d3 = 01101111
	// d4 = 10010000
	d4 := d2 ^ d3
	d5 := d2 & d3
	// 按位或
	// 把 d2 和 d3 一个为 1 一个为 0 的位设为 1
	// d2 = 11111111
	// d3 = 01101111
	// d6 = 11111111
	d6 := d2 | d3
	// 位运算中的‌位清除‌操作
	// d2 = 11111111,
	// d3 = 01101111
	// d7 = 10010000
	// 按位清除操作符 &^
	// 即 d7 等于 d3 中为 1 的位(被清除所得 0)，剩下位取 d2 的值
	d7 := d2 &^ d3

	fmt.Printf("a: %d\n", a)
	fmt.Printf("b: %d\n", b)
	fmt.Printf("c: %d\n", c)
	fmt.Printf("d: %d\n", d1)
	fmt.Printf("d2: %d\n", d2)
	fmt.Printf("d3: %d\n", d3)
	fmt.Printf("d4: %d\n", d4)
	fmt.Printf("d5: %d\n", d5)
	fmt.Printf("d6: %d\n", d6)
	fmt.Printf("d7: %d\n", d7)
	fmt.Printf("------------------------------------\n")
}
